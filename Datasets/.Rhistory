#    plotType (string) - type of plot to make
makeResidPlots <- function(predictions,zoneVals,monitor,outputFileName) {
uniqueZones <- unique(zoneVals)[order(unique(zoneVals))] # get unique zone values
# if the only unique zone values is 9999, create a single global images
if(uniqueZones==-9999) {
# define graph variables
zoneNames <- c("Global")
yLab = "monitor aveage (ppb)"
xLab <- "predicted (ppb)"
maxVal <- max(max(predictions),max(monitor))
minVal <- min(min(predictions),min(monitor))
predictions2 <- data.frame(predictions,monitor)
# create the graph
ggplot(data = predictions2, aes(x=predictions, y=monitor)) + geom_point() +
ggtitle(zoneNames[1]) + labs(x=xLab,y=yLab) + ylim(minVal,maxVal) + xlim(0,maxVal) +
geom_smooth(method = "lm", se = FALSE) + geom_abline(intercept=0,slope=1)
#dev.off()
}
# create subset plots for each continental region
else {
zoneNames <- c("North America","South America","Europe","Africa","Asia","Oceania")
par(mfrow = c(3, 2))
yLab = "monitor aveage (ppb)"
# for each continental region, create sub plots
for(i in 1:length(uniqueZones)) {
tempResid <- subset(predictions,zoneVals==uniqueZones[i])
tempMonitor <- subset(monitor,zoneVals == uniqueZones[i])
xLab <- "predicted (ppb)"
maxVal <- max(max(tempResid),max(tempMonitor))
minVal <- min(min(tempResid),min(tempMonitor))
tempData <- data.frame(tempResid,tempMonitor)
tempPlot <- ggplot(data = tempData, aes(x=tempResid, y=tempMonitor)) + geom_point() +
ggtitle(zoneNames[i]) + labs(x=xLab,y=yLab) + ylim(minVal,maxVal) + xlim(0,maxVal) +
geom_smooth(method = "lm", se = FALSE) + geom_abline(intercept=0,slope=1)
assign(paste("p",as.character(i),sep=""), tempPlot)
}
#plot(tempMonitor,tempResid,xlim=c(minVal,maxVal),ylim=c(minVal,maxVal),title=)
multiplot(p1,p2,p3,p4,p5,p6, cols = 2,save = outputFileName)
}
} # end of makeResidPlots
# calculate and graph the partial R2 values for all variables and continental regions.
# INPUTS:
#    inData (dataframe) - data matrix containing predictor variables
#    inMonitor (float array) - array containing monitor measurements
#    outFile (string) - filepath and name of the output .eps file
graphPartialR2 <- function(inData, inMonitor, outFile) {
uniqueZoneVals <- c(0,1,3,4,6,7,9) # list of all of the unique continental regions
# for each continental region, subest the predictor matrix and monitors to the region of interest
for(zoneVal in 1:length(uniqueZoneVals)) {
if(uniqueZoneVals[zoneVal] == 0) {
tempMat <- as.matrix(inData)
tempMonitor <- inMonitor
}
else {
tempMat <- subset(as.matrix(inData),exactMonitors$zone == uniqueZoneVals[zoneVal])
tempMonitor <- subset(inMonitor,exactMonitors$zone == uniqueZoneVals[zoneVal])
cat(zoneVal)
}
partialR2 <- rep(0,length(inData))
lmTotal <- lm(tempMonitor~tempMat)
# claculate partial R2 for all variables in the dataset
ssrTot <- sum(anova(lmTotal)$"Sum Sq"[1:2])
sseTot <- anova(lmTotal)$"Sum Sq"[2]
for(i in 1:length(inData)) {
tempRemove <- names(inData)[i]
tempData <- tempMat[ , !names(inData) %in% tempRemove]
tempLm <- lm(tempMonitor~tempData)
tempSSR <- anova(tempLm)$"Sum Sq"[1]
tempSSE <- anova(tempLm)$"Sum Sq"[2]
partialR2[i] <- (tempSSE - sseTot)/tempSSE
if(zoneVal == 1) {
cat(partialR2[i])
cat("\n")
}
}
if(uniqueZoneVals[zoneVal]==0) {
valMat <- round(partialR2*100,2)
}
else {
valMat <- cbind(valMat,round(partialR2*100,2))
cat(length(valMat[,1]))
cat("\n")
}
}
library(gplots)
library(RColorBrewer)
valMat <- data.frame(valMat[1:15,])
names(valMat) <-c("Global","N America","S America","Europe","Africa","Asia","Oceania")
rownames(valMat) <- names(inData)[1:15]
# define parameters for creating heatmap
"#FF2400"
my_palette <- colorRampPalette(c("#E62020", "yellow", "green"))(n = 299)
# (optional) defines the color breaks manually for a "skewed" color transition
col_breaks = c(seq(0,0.49,length=100),   # for red
seq(0.5,1.49,length=100),            # for yellow
seq(1.5,2.5,length=100))              # for green
row_distance = dist(valMat, method = "manhattan")
row_cluster = hclust(row_distance, method = "ward.D")
col_distance = dist(t(valMat), method = "manhattan")
col_cluster = hclust(col_distance, method = "ward.D")
setEPS()
postscript(outFile)
heatmap.2(as.matrix(valMat),
cellnote = valMat,  # same data set for cell labels
main = "Partial R2 2 Fold", # heat map title
notecol = "black",      # change font color of cell labels to black#
density.info = "none",  # turns off density plot inside color legend
trace = "none",         # turns off trace lines inside the heat map
margins = c(12,9),     # widens margins around plot
col = my_palette,
breaks=col_breaks,# use on color palette defined earlier
Rowv = as.dendrogram(row_cluster), # apply default clustering method
Colv = as.dendrogram(col_cluster), # apply default clustering method
dendrogram = "none")
dev.off()
} # end of graphPartialR2
# calculate the minimum p-value of each variable for all continental and global regions
# INPUTS:
#    inMatrix (dataframe) - data matrix containing predictor variables
#    inMonitor (float array) - array containing monitor measurements
#    inZones (int array) - array indicating which zones each row of data belongs to
# OUTPUTS:
#    minPVals (int array) - array containing minimum p-values for each variable, in the same
#                           order as the predictor variables in the inMatrix
calcMinPValue <- function(inMatrix,inMonitor,inZones) {
uniqueZones <- c(1,3,4,6,7,9) # identify unique continental regions
minPVals <- rep(100,14) # create vector for p vals
# for each continental region, subset the predictor matrix to the continental region, and
# calculate the pvals.  If the p vals are less than current min pvals, then update the pvals
for(i in 1:length(uniqueZones)) {
tempData <- subset(inMatrix,inZones==uniqueZones[i])
tempMonitors <- subset(inMonitor,inZones==uniqueZones[i])
tempModel <- summary(lm(tempMonitors ~ tempData))
pVals <- tempModel$coefficients[,4]
for(j in 1:length(pVals)) {
if(pVals[j]<minPVals[j]) {
minPVals[j] <- pVals[j]
}
}
}
return(minPVals)
} # end of calcMinPValue
# calculate the IQR for all variables in a matrix
# INPUTS:
#   inMatrix (dataframe) - variables for which IQR should be calculated
# OUTPUTS:
#   IQRVals (float array) - array of IQR values, in the same order as the
#                           variables in inMatrix
calcIQR <- function(inMatrix) {
IQRVals <- rep(0,length(inMatrix[1,]))
for(i in 1:length(inMatrix[1,])) {
IQRVals[i] <- IQR(inMatrix[,i])
}
return(IQRVals)
} # end of calcIQR
library(ggplot2)
library(glmnet)
install.packages("ggplot2")
install.packages("glmnet")
library(ggplot2)
library(glmnet)
setwd("C:/users/larkinan/documents")
setwd("C:/users/larkinan/documents/Canada_NO2_LUR_14_16")
setwd("C:/users/larkinan/documents/Canada_NO2_LUR_14_16/Datasets")
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
names(rawData)
drops <- c("NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
head(exactMatrix)
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,monitor,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
coefRaw <- coef(cvfit,0)
exactMat3 <- cbind(rep(1,length(tempMat[,1])),tempMat)
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
coefRaw <- coef(cvfit,0)
exactMat3 <- cbind(rep(1,length(tempMat[,1])),tempMat)
summary(NO2_vals)
summary(tempMat)
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
coefRaw <- coef(cvfit,0)
exactMat3 <- cbind(rep(1,length(tempMat[,1])),tempMat)
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,lower.limit=0) # perform lasso regression
coefRaw <- coef(cvfit,0)
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
head(tempMat)
summary(NO2_vals)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
summary(NO2_vals)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
NO2_vals
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
summary(NO2_vals)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
summary(NO2_vals)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
summary(NO2_vals)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
summary(NO2_vals)
vfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
summary(NO2_vals)
summary(tempMat)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
#exactMatrix2 <- exactMatrix2[, (names(exactMatrix2) %in% keeps)] # reduce variables to final model structure
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
#exactMatrix2 <- exactMatrix2[, (names(exactMatrix2) %in% keeps)] # reduce variables to final model structure
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
#exactMatrix2 <- exactMatrix2[, (names(exactMatrix2) %in% keeps)] # reduce variables to final model structure
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
names(tempMat)
names(exactMatrix)
variables flipped
posCoeffMatrix <- function(inData) {
tempNames <- names(inData)
endLength <- length(tempNames)
switchList <- c("bL","ND","wa","te") # list of two characters that indicate protective variables
# for each variable in the dataset, check if the variable is in the list of protective variables.
# if the variable is protective, multiply the value by 1
for(i in 1:endLength) {
predType <- substr(tempNames[i],1,2)
if(predType %in% switchList) {
inData[,i] <- inData[,i]*-1
}
}
return(inData)
} # end of posCoefMatrix
posCoeffMatrix <- function(inData) {
tempNames <- names(inData)
endLength <- length(tempNames)
switchList <- c("bL","ND","wa","te") # list of two characters that indicate protective variables
# for each variable in the dataset, check if the variable is in the list of protective variables.
# if the variable is protective, multiply the value by 1
for(i in 1:endLength) {
predType <- substr(tempNames[i],1,2)
if(predType %in% switchList) {
inData[,i] <- inData[,i]*-1
}
}
return(inData)
} # end of posCoefMatrix
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
head(tempMat)
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
names(tempMat)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18_v2.csv")
NO2_vals <-  rawData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- rawData[ , !(names(rawData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
names(exactMatrix)
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
summary(NO2_vals)
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
summary(tempMat)
screenedMonitors <- subset(rawData,elevation >0)
summary(screenedMonitors$elevation)
screenedData <- subset(rawData,elevation >-1)
screenedData <- subset(rawData,elevation >-1)
NO2_vals <-  screenedData$meanNO2_2014_2016
NO2_vals <-  screenedData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- screenedData[ , !(names(screenedData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
cvfit
coefRaw <- coef(cvfit,0)
coefRaw
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps <- reduceLassoModel(coefRaw,exactMatrix)
reduceLassoModel <- function(inCoef,inPred,fold=5) {
# create a vector of the first two characters for all variables
bufferTypes <- c("aL","bL","bR","cL","cR","dR","eR","fR","wa","ND")
a <- which(inCoef > 0) # identify which variables were selected by lasso regression
b <- a[2:length(a)]-1 # remove the intercept from the model
subNames <- names(inPred)[b] # get the names of the variables selected by lasso regression
finalList <- c()
index <- 0
# for each type of varaible, remove variables that are within 3 fold of a smaller variable
for(index in 1:length(bufferTypes)) {
tempData <- subNames[substr(subNames,1,2) %in% bufferTypes[index]]
# get the the distances for all buffers of the selected variable type
if(length(tempData)>0) {
buffList <- getBuffDistVec(tempData)
reduced <- reduceBuffList(buffList,fold)
m <- "m"
reduced <- paste(bufferTypes[index],reduced,m,sep="")
finalList <- c(finalList,reduced)
}
}
otherVars <- subNames[substr(subNames,1,2) %in% bufferTypes == FALSE]
finalList <- c(finalList,otherVars)
return(finalList)
} # end of reduceLassoModel
keeps <- reduceLassoModel(coefRaw,exactMatrix)
# create a vector of the first two characters for all variables
bufferTypes <- c("aL","bL","bR","cL","cR","dR","eR","fR","wa","ND")
inCoef <- coefRaw
a <- which(inCoef > 0) # identify which variables were selected by lasso regression
b <- a[2:length(a)]-1 # remove the intercept from the model
subNames <- names(inPred)[b] # get the names of the variables selected by lasso regression
finalList <- c()
index <- 0
View(screenedMonitors)
8h
inPred <- exactMatrix
a <- which(inCoef > 0) # identify which variables were selected by lasso regression
b <- a[2:length(a)]-1 # remove the intercept from the model
subNames <- names(inPred)[b] # get the names of the variables selected by lasso regression
finalList <- c()
index <- 0
a
b
subNames
# for each type of varaible, remove variables that are within 3 fold of a smaller variable
for(index in 1:length(bufferTypes)) {
tempData <- subNames[substr(subNames,1,2) %in% bufferTypes[index]]
# get the the distances for all buffers of the selected variable type
if(length(tempData)>0) {
buffList <- getBuffDistVec(tempData)
reduced <- reduceBuffList(buffList,fold)
m <- "m"
reduced <- paste(bufferTypes[index],reduced,m,sep="")
finalList <- c(finalList,reduced)
}
}
fold <- 3
# for each type of varaible, remove variables that are within 3 fold of a smaller variable
for(index in 1:length(bufferTypes)) {
tempData <- subNames[substr(subNames,1,2) %in% bufferTypes[index]]
# get the the distances for all buffers of the selected variable type
if(length(tempData)>0) {
buffList <- getBuffDistVec(tempData)
reduced <- reduceBuffList(buffList,fold)
m <- "m"
reduced <- paste(bufferTypes[index],reduced,m,sep="")
finalList <- c(finalList,reduced)
}
}
tempData
buffList
# create a vector of the first two characters for all variables
bufferTypes <- c("aL","bL","bR","cL","cR","dR","eR","fR","wa","NDVI_14_16_")
a <- which(inCoef > 0) # identify which variables were selected by lasso regression
b <- a[2:length(a)]-1 # remove the intercept from the model
subNames <- names(inPred)[b] # get the names of the variables selected by lasso regression
finalList <- c()
index <- 0
# for each type of varaible, remove variables that are within 3 fold of a smaller variable
for(index in 1:length(bufferTypes)) {
tempData <- subNames[substr(subNames,1,2) %in% bufferTypes[index]]
# get the the distances for all buffers of the selected variable type
if(length(tempData)>0) {
buffList <- getBuffDistVec(tempData)
reduced <- reduceBuffList(buffList,fold)
m <- "m"
reduced <- paste(bufferTypes[index],reduced,m,sep="")
finalList <- c(finalList,reduced)
}
}
otherVars <- subNames[substr(subNames,1,2) %in% bufferTypes == FALSE]
finalList <- c(finalList,otherVars)
return(finalList)
} # end of reduceLassoModel
# reduce incremental variables within x fold values of the smallest vriable size
# INPUTS:
#    inCoef (float array)
# OuTPUTS:
#    buffDist (integer array) - array containing buffer distances, in ascending order
reduceLassoModel <- function(inCoef,inPred,fold=5) {
# create a vector of the first two characters for all variables
bufferTypes <- c("aL","bL","bR","cL","cR","dR","eR","fR","wa","NDVI_14_16_")
a <- which(inCoef > 0) # identify which variables were selected by lasso regression
b <- a[2:length(a)]-1 # remove the intercept from the model
subNames <- names(inPred)[b] # get the names of the variables selected by lasso regression
finalList <- c()
index <- 0
# for each type of varaible, remove variables that are within 3 fold of a smaller variable
for(index in 1:length(bufferTypes)) {
tempData <- subNames[substr(subNames,1,2) %in% bufferTypes[index]]
# get the the distances for all buffers of the selected variable type
if(length(tempData)>0) {
buffList <- getBuffDistVec(tempData)
reduced <- reduceBuffList(buffList,fold)
m <- "m"
reduced <- paste(bufferTypes[index],reduced,m,sep="")
finalList <- c(finalList,reduced)
}
}
otherVars <- subNames[substr(subNames,1,2) %in% bufferTypes == FALSE]
finalList <- c(finalList,otherVars)
return(finalList)
} # end of reduceLassoModel
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps
# identify varaibles that should be kept in the second step of the model building
coefRaw <- coef(cvfit, s = "lambda.1se")
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
NO2_vals <-  screenedData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- screenedData[ , !(names(screenedData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals,type.measure = "mse",standardize=TRUE,alpha = 1,lower.limit=0) # perform lasso regression
coefRaw <- coef(cvfit,0)
coefRaw <- coef(cvfit, s = "lambda.1se")
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps
names(exactMatrix)
rawData <- read.csv("Canada_LUR_preprocessed_Sep17_18.csv")
screenedData <- subset(rawData,elevation >-1)
NO2_vals <-  screenedData$meanNO2_2014_2016
drops <- c("meanNO2_2014_2016","NAPS.ID","percent.completeness_2013","percent.completeness_2014","percent.completeness_2015",
"percent.completeness_2016","mean_2013","mean_2014","mean_2015","mean_2016", "numObs", "medYr", "minNO2", "meanNO2", "maxNO2", "stdDevNO2", "numMeas","FID","NAME","CONTINENT")
exactMatrix <- screenedData[ , !(names(screenedData) %in% drops)]
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
names(exactMatrix)
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
coefRaw <- coef(cvfit,0)
# identify varaibles that should be kept in the second step of the model building
coefRaw <- coef(cvfit, s = "lambda.1se")
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps
coef
cvfit
coefRaw <- coef(cvfit, s = "lambda.1se")
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps
tempMat <- as.matrix(posCoeffMatrix(exactMatrix)) # reverse direction of protective variabless
cvfit <- glmnet::cv.glmnet(tempMat,NO2_vals) # perform lasso regression
coefRaw <- coef(cvfit, s = "lambda.1se")
coefRaw
head(tempMat)
keeps
coefRaw
keeps <- reduceLassoModel(coefRaw,exactMatrix,3)
keeps
